---
description: General Guidelines, Use them everytime we create a new feature or edit an existing one.
globs: *.ts, *.tsx
---

# UI Components

- Dont create Shadcn UI components in /components/ui and simple use them directly in the code, and leave adding the Shadcn components for the user.

## General Guidelines
1. Tech Stack
Next.js 14 (App Router)
TypeScript
Prisma (PostgreSQL)
NextAuth.js
Shadcn UI
TailwindCSS
DND Kit
Zod for validation
2. File Structure

Project/
├── app/
│   ├── api/
│   │   ├── links/
│   │   └── user/
│   ├── dashboard/
│   └── [username]/
├── components/
│   ├── ui/          # Shadcn components
│   ├── auth/
│   ├── dashboard/
│   └── links/
├── lib/
│   ├── data/       # Database operations
│   └── auth.ts
└── prisma/
    └── schema.prisma


3. Code Style and Structure
Use TypeScript for all files
Use "function" keyword for components and pure functions
Follow mobile-first responsive design
Use named exports for components
Place types/interfaces at the end of files or in separate type files
Follow RORO (Receive Object, Return Object) pattern for functions

4. Component Guidelines
Use Shadcn UI components from '@/components/ui'
Never write Shadcn components from scratch
Use 'use client' directive only when necessary
Implement proper error boundaries
Use React.Suspense for loading states

5. Data Fetching and State Management
Use Server Components by default
Implement proper error handling in data functions
Use try-catch blocks with specific error messages
Return empty arrays/null for failed fetches instead of throwing
Log errors in catch blocks

6. Database Operations
Keep database operations in lib/data/ directory
Use Prisma Client for all database operations
Implement proper error handling for database operations
Use transactions for multiple operations
Include proper TypeScript types for all database models

7. Authentication
Use NextAuth.js for authentication
Implement proper session handling
Use getServerSession for server-side auth checks
Include proper type definitions for auth

8. API Routes
Use Next.js App Router API conventions
Implement proper request validation using Zod
Return consistent error responses
Use proper HTTP status codes
Include proper error handling

9. Drag and Drop
Use DND Kit for drag and drop functionality
Implement proper reordering logic
Update database after successful reorder
Handle reordering errors gracefully

10. Styling
Use TailwindCSS for styling
Follow mobile-first approach
Use consistent spacing and sizing
Use Shadcn UI theme variables
Maintain consistent class naming

11. Error Handling
Use toast notifications for user feedback
Implement proper error boundaries
Log errors to console in development
Return user-friendly error messages
Handle edge cases gracefully

12. Type Safety
Use strict TypeScript configurations
Define proper interfaces for all props
Use Zod for runtime validation
Include proper type definitions for external libraries
Avoid using 'any' type

13. Performance
Implement proper loading states
Use proper caching strategies
Optimize database queries
Implement proper pagination where needed
Use proper image optimization

