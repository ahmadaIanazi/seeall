generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  password      String
  email         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  page          Page?
}

model Page {
  id               String       @id @default(cuid())
  userId           String       @unique @map("userId")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())
  alignment        String       @default("center")
  backgroundColor  String       @default("#FFFFFF")
  bio              String?
  brandColor       String       @default("#000000")
  font             String       @default("default")
  footer           String?
  language         String       @default("en")
  multipleLanguage Boolean      @default(false)
  pageImage        String?
  pageName         String?
  style            String?
  categories       Category[]
  comments         Comment[]
  forms            Form[]
  links            Link[]
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  products         Product[]
  socialLinks      SocialLink[]
  stats            Stats?
}

model Link {
  id              String   @id @default(cuid())
  type            String   @default("link")
  title           String
  url             String?
  image           String?
  description     String?
  order           Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  pageId          String
  page            Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model SocialLink {
  id        String   @id @default(cuid())
  platform  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Stats {
  id        String   @id @default(cuid())
  pageId    String   @unique(map: "Stats_pageId_unique")
  visits    Int      @default(0)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Category {
  id               String     @id @default(cuid())
  pageId           String
  name             String
  image            String?
  icon             String?
  multiLanguage    Json?
  parentCategoryId String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @default(now())
  page             Page       @relation(fields: [pageId], references: [id], onDelete: Cascade)
  parentCategory   Category?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  subCategories    Category[] @relation("CategoryHierarchy")
  products         Product[]

  @@index([pageId], map: "Category_pageId_index")
  @@index([parentCategoryId], map: "Category_parentCategoryId_index")
}

model Product {
  id            String    @id @default(cuid())
  pageId        String
  categoryId    String?
  name          String
  calories      Int?
  allergies     String?
  description   String?
  multiLanguage Json?
  price         Float?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  comments      Comment[]
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  page          Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([categoryId], map: "Product_categoryId_index")
  @@index([pageId], map: "Product_pageId_index")
}

model Form {
  id          String           @id @default(cuid())
  pageId      String
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
  page        Page             @relation(fields: [pageId], references: [id], onDelete: Cascade)
  fields      FormField[]
  submissions FormSubmission[]

  @@index([pageId], map: "Form_pageId_index")
}

model FormField {
  id        String   @id @default(cuid())
  formId    String
  label     String
  type      String
  required  Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@index([formId], map: "FormField_formId_index")
}

model FormSubmission {
  id        String   @id @default(cuid())
  formId    String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@index([formId], map: "FormSubmission_formId_index")
}

model Comment {
  id        String   @id @default(cuid())
  pageId    String?
  productId String?
  content   String
  rating    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  page      Page?    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([pageId], map: "Comment_pageId_index")
  @@index([productId], map: "Comment_productId_index")
}
