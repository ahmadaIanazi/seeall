generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum ContentType {
  LINK
  IMAGE
  ICON
  CATEGORY
  PRODUCT
  SOCIAL
  BLANK
}

enum PaymentStatus {
  SUCCEEDED
  PENDING
  FAILED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  TRIAL
}

model User {
  id            String        @id @default(cuid())
  username      String        @unique
  password      String
  email         String?
  emailVerified DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  page          Page?
  subscriptions Subscription[]
  paymentMethods PaymentMethod[]
  payments       Payment[]
}

model Page {
  id                String       @id @default(cuid())
  userId            String       @unique
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now())
  alignment         String       @default("center")
  backgroundColor   String       @default("#FFFFFF")
  bio               String?
  brandColor        String       @default("#000000")
  font              String       @default("default")
  footer            String?
  language          String       @default("en")
  multipleLanguage  Boolean      @default(false)
  live              Boolean      @default(true)
  pageImage         String?
  pageName          String?
  style             String?
  featuredContentIds String[]
  showCategories    Boolean      @default(true)
  contents          Content[]
  pageStats         PageStats?
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PageStats {
  id        String   @id @default(cuid())
  pageId    String   @unique
  visits    Int      @default(0)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Content {
  id               String        @id @default(cuid())
  pageId           String
  type             ContentType
  title            String?
  url              String?
  image            String?
  icon             String?
  description      String?
  name             String?
  price            Float?
  currency         String?
  calories         Int?
  allergies        String?
  allergiesIcons   Json?
  additionalPrices Json?
  multiLanguage    Json?
  parentContentId  String?
  visible          Boolean       @default(true)
  anchorName       String?
  anchorImage      String?
  anchorIcon       String?
  anchor           Boolean?
  order            Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  page             Page          @relation(fields: [pageId], references: [id], onDelete: Cascade)
  parentContent    Content?      @relation("ContentHierarchy", fields: [parentContentId], references: [id], onDelete: Cascade)
  subContents      Content[]     @relation("ContentHierarchy")
  contentStats     ContentStats?
}

model ContentStats {
  id        String   @id @default(cuid())
  contentId String   @unique
  visits    Int      @default(0)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id                    String  @id @default(cuid())
  userId                String
  stripePaymentMethodId String
  cardBrand             String?
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                   String        @id @default(cuid())
  userId               String
  amount               Int
  currency             String
  status               PaymentStatus @default(PENDING)
  stripePaymentIntentId String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @default(now())
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String           @id @default(cuid())
  userId               String
  status               SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
